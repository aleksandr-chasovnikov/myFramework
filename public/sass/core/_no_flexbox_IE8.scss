
//Видимость блоков:
//$border-test: 1px solid #000; 

// justify-content: CENTER - Все бллоки собраны в центре  ===========
//Если <a> расположены с переносами, то между ними будут пробелы:

//.header {
//	text-align: center;
//	border: $border-test;
//    .logo {
//        display: inline-block;
//    }
//    .nav {
//        display: inline-block;
//        margin-top: 10px;
//    }
//}

// justify-content: SPACE-BETWEEN - равномерно по горизонтали (крайние прижаты к краям)
// :after переполняет строку, чтобы блоки не сбивались влево (когда браузер думает, что строка последняя)
@mixin justify {
	text-align: justify;
	line-height: 0;
	font-size: 0;
	text-justify: newspaper;
	zoom: 1;
	text-align-last: justify;
	&:after {
		content: "";
		display: inline-block;
		width: 100%;
		height: 0px;
		visibility: hidden;
		overflow: hidden;
	}
}
//.header {
//    @include justify;
//    .logo {
//        display: inline-block;
//    }
//    .nav {
//        display: inline-block;
//        margin-top: 10px;
//    }
//}

//================================

// Выравнивание ПО ВЫСОТЕ 
// ВАРИАНТ 1. "vertical-align: middle" работает относительно СВОИХ СОСЕДЕЙ "display: inline-block",
//поэтому используем "before"(height: 100%) и выравниваем относительно него
@mixin vcenter-before {
	text-align: center;
	font-size: 0;
	height: 100vh;
	&:before {
		content: '';
		display: inline-block;
		width: 0;
		height: 100%;
		vertical-align: middle; 
	}
}

//EXAMLE:
//.parent {
//	@include vcenter-before; 
//	.child {
//		display: inline-block;
//		vertical-align: middle;
//	}
//}


// ВАРИАНТ 2. Здесь "vertical-align: middle" работает для дочерних элементов
//.parent-table {
//	display: table;
//	width: 100%;
//	.parent {   
//		display: table-cell;
//		vertical-align: middle;
//		width: 100%;
//		.child {
//		display: inline-block;
//		}
//	}
//}

// ВАРИАНТ 3 (Не поддерж. IE8 и ниже) "translateY(-50%)" - половина собственной высоты.
// Если высота элемента нечетная, то текст и линии будут размытыми(по пол px)

@mixin centerer($horizontal: true, $vertical: true) {
  position: absolute;
  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if ($horizontal) {
    left: 50%;
    transform: translate(-50%, 0);
  } @else if ($vertical) {
    top: 50%;
    transform: translate(0, -50%);
  }
}

          //EXAMLE:
//.parent {
//	height: 100vh;
//	position: relative;
//	.child {
//		@include vcenter-abs(false, true);
//	}
//}


// GRID. Блоки с разными высотами расположены в две строки
//Родителю не задаем явную ширину.
// Дечерн элементам даем левые маржины и компенсируем отриц маржином родителя

//.list {
//	margin-left: -25px;
//	font-size: 0;
//	.list__item {
//		display: inline-block;
//		vertical-align: top;
//		margin-bottom: 20px;
//		width: 100px;
//		height: 100px;
//		margin-left: 25px;
//	}
//	.list__item--size-s {
//		height: 75px;
//	}
//	.list__item--size-l {
//		height: 130px;
//	}
//}

// GRID-float. Должны иметь одинаковую высоту (иначе начнут др за др цепляться)
// ...

// АДАПТИВНЫЙ SIDEBAR. Правый сайдбар переместить вниз на малых дисплеях

//.content {
//	display: table;
//	.child__left {
//		display: table-cell;
//		width: 100%;		
//		@include media(768) {
//			display: block;
//		}
//	}
//	.child__right {		
//		display: table-cell;
//		width: 330px;		
//		@include media(768) {
//			display: block;
//		}
//	}
//	@include media(768) {
//		display: block;
//	}
//}

